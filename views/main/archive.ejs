<% layout('layouts/boilerplate')%>
<nav id="mainNavbar" class="navbar navbar-dark navbar-expand-sm fixed-top">
    <button class="navbar-toggler" data-toggle="collapse" data-target="#navLinks" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navLinks">
        <ul class="navbar-nav">
            <li class="nav-item" id="mainNavLi">
                <a href="/" class="nav-link">
                    <span class="svgContainer"></span>
                    <span>MARGINAL SIGHTLINE</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="/research" class="nav-link">RESEARCH</a>
            </li>
            <li class="nav-item current">
                <a href="/archive" class="nav-link">ARCHIVE</a>
            </li>
            <li class="nav-item">
                <a href="/opposition" class="nav-link">OPPOSITION</a>
            </li>
        </ul>
    </div>
    <div id="tabName">
        ARCHIVE
    </div>
</nav>
<main class="container">
    <div class="spaceholder"></div>
    <div class="row">
    <% if (success && success.length) {%>
        <div class="col-md-6 offset-md-3">
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                <%= success %>
                <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
        </div>
    <% } %>
    </div>
    <div class="row groups ml-sm-5 pl-sm-5">
        <div class="col-5 offset-1 col-lg-4 offset-lg-2 col-xxl-3 offset-xxl-3" id="group2">
            <img src="/img/fulls/archive/1-2_quantitative_change.svg" alt="">
        </div>
        <div class="col-5 col-lg-4 col-xxl-3" id="group1">
            <img src="/img/fulls/archive/1-1_skin.svg" alt="">
        </div>
    </div>
    <div class="row groups mr-sm-5 pr-sm-5">
        <div class="col-5 offset-1 col-lg-4 offset-lg-2 col-xxl-3 offset-xxl-3" id="group3">
            <img src="/img/fulls/archive/1-3_discipline.svg" alt="">
        </div>
        <div class="col-5 col-lg-4 col-xxl-3" id="group4">
            <img src="/img/fulls/archive/1-4_imperfect.svg" alt="" class="img-fluid">
        </div>
    </div>
    <div class="row my-5">
        <div class="col-10 offset-1 col-md-6 offset-md-3 col-xl-4 offset-xl-4">
            <p style="font-size: 1em;">
                <span style="font-weight: 400; font-style: italic;">The Extraordinary Body Gaze Archive</span>
                <span>hopes to be a collaborative space that allows for communication. It accepts people to "gaze at the story", and makes small graphics of things related to the story that belong to the story, and records its origin and meaning. The appearance of Extraordinary Body crowd is divided into 4 categories: skin, Body quantitative adaptation, disability and discipline.</span>
            </p>
        </div>
    </div>
    <div class="row my-5">
        <div class="col-10 offset-1 col-md-8 offset-md-2 col-xl-6 offset-xl-3">
            <p class="concentrated" style="text-align: center;">You are welcome to tell us your gazing story!! Click <a href="/archive/story">here</a> to contribute!!</p>
        </div>
    </div>
    <div id="numbers">
        <% for (let row_num of Array(7).keys()) { %>
        <div class="row pr-10">
            <% for (let col_num of Array(4).keys()) { %>
            <div class="col-2 cube">
                <p>(<%= col_num+1 %>)</p>
            </div>
            <% } %>
        </div>
        <% } %>
    </div>
</main>

<script>
    let cards = <%- cards %>;
    cards.sort((a, b) => { return a.order - b.order });

    const cubeSample = document.querySelector('.cube');
    const offsetInfo = () => {
        const cubeHeight = cubeSample.getBoundingClientRect().height;
        const cubeWidth = cubeSample.getBoundingClientRect().width;
        const numbers = document.querySelector('#numbers');
        const numbersHeight = numbers.getBoundingClientRect().height;
        let numbersMB = parseInt(numbers.style.marginBottom);
        if (isNaN(numbersMB)) {
            numbersMB = 0;
        };
        // console.log(numbersMB);
        const cardsOffsetHeight = numbersHeight + numbersMB;
        // console.log(cardsOffsetHeight);
        return { cubeHeight, cubeWidth, cardsOffsetHeight };
    };

    const vertCardScaler = (card) => {
        const { cubeHeight } = offsetInfo();
        card.style.width = cubeHeight * 0.75 + 'px';
        card.style.left = cubeHeight * 0.15 + 'px';
        card.style.top = cubeHeight * 0.05 + 'px';
    }

    const horiCardScaler = (card) => {
        const { cubeHeight } = offsetInfo();
        card.style.height = cubeHeight * 0.75 + 'px';
        card.style.left = cubeHeight * 0.15 + 'px';
        card.style.top = cubeHeight * 0.15 + 'px';
    }

    const numbers = document.querySelector('#numbers')
    let lastNode = numbers

    const positionAndScale = () => {
        for (let card of cards) {

            // 1st-order container
            let cardContainer = document.createElement('div');
            cardContainer.classList.add('row');
            cardContainer.classList.add('card-container');
            cardContainer.classList.add('pr-10');
            lastNode.insertAdjacentElement('afterend', cardContainer);
            lastNode = cardContainer;
            // img contained
            let cardElement = document.createElement('div');
            const imgAdder = () => {
                let imgElement = document.createElement('img');
                if (card.direction === 1) {
                    imgElement.classList.add('img-vertical');
                } else {
                    imgElement.classList.add('img-horizontal');
                }
                imgElement.src = card.img;
                imgElement.alt = 'card' + card.order;
                cardElement.appendChild(imgElement);
            }
            imgAdder();
            // card container
            const cardCustomizer = () => {
                cardElement.id = 'card' + card.order;
                cardElement.classList.add('card-custom')
                const { cubeHeight, cubeWidth, cardsOffsetHeight } = offsetInfo();
                let cardTopOffset = cardsOffsetHeight - cubeHeight * (card.order - 1);
                let cardLeftOffset = cubeWidth * (card.type - 1);
                cardElement.style.marginTop = '-' + cardTopOffset + 'px';
                cardElement.style.marginLeft = cardLeftOffset + 'px';
                if (card.direction === 1) {
                    vertCardScaler(cardElement);
                } else {
                    horiCardScaler(cardElement);
                };
            }
            cardCustomizer();
            // window.addEventListener('resize', cardCustomizer)
            cardContainer.appendChild(cardElement);

        }
    }
    positionAndScale();
</script>